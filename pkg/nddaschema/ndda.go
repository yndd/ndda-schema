/*
Package nddaschema is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/go/pkg/mod/github.com/openconfig/ygot@v0.13.1/genutil/names.go
using the following YANG input files:
	- yang/ndda/ndda-common.yang
	- yang/ndda/ndda-if-si-addressinfo.yang
	- yang/ndda/ndda-if-subinterface.yang
	- yang/ndda/ndda-interface.yang
	- yang/ndda/ndda-network-instance.yang
	- yang/ndda/ndda-system-platform.yang
	- yang/ndda/ndda-system.yang
Imported modules were sourced from:
	- yang/...
*/
package nddaschema

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interface	map[string]*NddaInterface_Interface	`path:"interface" module:"ndda-interface"`
	NetworkInstance	*NddaNetworkInstance_NetworkInstance	`path:"network-instance" module:"ndda-network-instance"`
	System	*NddaSystem_System	`path:"system" module:"ndda-system"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*NddaInterface_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaInterface_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NddaInterface_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface represents the /ndda-interface/interface YANG schema element.
type NddaInterface_Interface struct {
	Config	*NddaInterface_Interface_Config	`path:"config" module:"ndda-interface"`
	Name	*string	`path:"name" module:"ndda-interface"`
	State	*NddaInterface_Interface_State	`path:"state" module:"ndda-interface"`
	Subinterface	map[uint32]*NddaInterface_Interface_Subinterface	`path:"subinterface" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// NddaInterface_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NddaInterface_Interface) NewSubinterface(Index uint32) (*NddaInterface_Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*NddaInterface_Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &NddaInterface_Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// ΛListKeyMap returns the keys of the NddaInterface_Interface struct, which is a YANG list entry.
func (t *NddaInterface_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Config represents the /ndda-interface/interface/config YANG schema element.
type NddaInterface_Interface_Config struct {
	Kind	E_NddaCommon_InterfaceKind	`path:"kind" module:"ndda-interface"`
	Lacp	*bool	`path:"lacp" module:"ndda-interface"`
	LacpFallback	*bool	`path:"lacp-fallback" module:"ndda-interface"`
	Lag	*bool	`path:"lag" module:"ndda-interface"`
	LagMember	*bool	`path:"lag-member" module:"ndda-interface"`
	LagName	*string	`path:"lag-name" module:"ndda-interface"`
	Name	*string	`path:"name" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_State represents the /ndda-interface/interface/state YANG schema element.
type NddaInterface_Interface_State struct {
	Kind	E_NddaCommon_InterfaceKind	`path:"kind" module:"ndda-interface"`
	Lacp	*bool	`path:"lacp" module:"ndda-interface"`
	LacpFallback	*bool	`path:"lacp-fallback" module:"ndda-interface"`
	Lag	*bool	`path:"lag" module:"ndda-interface"`
	LagMember	*bool	`path:"lag-member" module:"ndda-interface"`
	LagName	*string	`path:"lag-name" module:"ndda-interface"`
	Name	*string	`path:"name" module:"ndda-interface"`
	Reason	*string	`path:"reason" module:"ndda-interface"`
	Statistics	*NddaInterface_Interface_State_Statistics	`path:"statistics" module:"ndda-interface"`
	Status	E_NddaCommon_OperState	`path:"status" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_State_Statistics represents the /ndda-interface/interface/state/statistics YANG schema element.
type NddaInterface_Interface_State_Statistics struct {
	InOctets	*uint64	`path:"in-octets" module:"ndda-interface"`
	InUnicastPackets	*uint64	`path:"in-unicast-packets" module:"ndda-interface"`
	OutOctets	*uint64	`path:"out-octets" module:"ndda-interface"`
	OutUnicastPackets	*uint64	`path:"out-unicast-packets" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_State_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_State_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_State_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_State_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_State_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface represents the /ndda-interface/interface/subinterface YANG schema element.
type NddaInterface_Interface_Subinterface struct {
	Config	*NddaInterface_Interface_Subinterface_Config	`path:"config" module:"ndda-interface"`
	Index	*uint32	`path:"index" module:"ndda-interface"`
	Ipv4	map[string]*NddaInterface_Interface_Subinterface_Ipv4	`path:"ipv4" module:"ndda-interface"`
	Ipv6	map[string]*NddaInterface_Interface_Subinterface_Ipv6	`path:"ipv6" module:"ndda-interface"`
	State	*NddaInterface_Interface_Subinterface_State	`path:"state" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface) IsYANGGoStruct() {}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NddaInterface_Interface_Subinterface struct. The keys of the list are populated from the input
// arguments.
func (t *NddaInterface_Interface_Subinterface) NewIpv4(IpPrefix string) (*NddaInterface_Interface_Subinterface_Ipv4, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[string]*NddaInterface_Interface_Subinterface_Ipv4)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NddaInterface_Interface_Subinterface_Ipv4{
		IpPrefix: &IpPrefix,
	}

	return t.Ipv4[key], nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NddaInterface_Interface_Subinterface struct. The keys of the list are populated from the input
// arguments.
func (t *NddaInterface_Interface_Subinterface) NewIpv6(IpPrefix string) (*NddaInterface_Interface_Subinterface_Ipv6, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[string]*NddaInterface_Interface_Subinterface_Ipv6)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NddaInterface_Interface_Subinterface_Ipv6{
		IpPrefix: &IpPrefix,
	}

	return t.Ipv6[key], nil
}

// ΛListKeyMap returns the keys of the NddaInterface_Interface_Subinterface struct, which is a YANG list entry.
func (t *NddaInterface_Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Config represents the /ndda-interface/interface/subinterface/config YANG schema element.
type NddaInterface_Interface_Subinterface_Config struct {
	Index	*uint32	`path:"index" module:"ndda-interface"`
	InnerVlanId	*uint16	`path:"inner-vlan-id" module:"ndda-interface"`
	Kind	E_NddaCommon_SubinterfaceKind	`path:"kind" module:"ndda-interface"`
	OuterVlanId	*uint16	`path:"outer-vlan-id" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv4 represents the /ndda-interface/interface/subinterface/ipv4 YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv4 struct {
	Config	*NddaInterface_Interface_Subinterface_Ipv4_Config	`path:"config" module:"ndda-interface"`
	IpPrefix	*string	`path:"ip-prefix" module:"ndda-interface"`
	State	*NddaInterface_Interface_Subinterface_Ipv4_State	`path:"state" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddaInterface_Interface_Subinterface_Ipv4 struct, which is a YANG list entry.
func (t *NddaInterface_Interface_Subinterface_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv4_Config represents the /ndda-interface/interface/subinterface/ipv4/config YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv4_Config struct {
	IpAddress	*string	`path:"ip-address" module:"ndda-interface"`
	IpCidr	*string	`path:"ip-cidr" module:"ndda-interface"`
	IpPrefix	*string	`path:"ip-prefix" module:"ndda-interface"`
	PrefixLength	*uint32	`path:"prefix-length" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv4_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv4_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv4_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv4_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv4_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv4_State represents the /ndda-interface/interface/subinterface/ipv4/state YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv4_State struct {
	IpAddress	*string	`path:"ip-address" module:"ndda-interface"`
	IpCidr	*string	`path:"ip-cidr" module:"ndda-interface"`
	IpPrefix	*string	`path:"ip-prefix" module:"ndda-interface"`
	PrefixLength	*uint32	`path:"prefix-length" module:"ndda-interface"`
	Reason	*string	`path:"reason" module:"ndda-interface"`
	Statistics	*NddaInterface_Interface_Subinterface_Ipv4_State_Statistics	`path:"statistics" module:"ndda-interface"`
	Status	E_NddaCommon_OperState	`path:"status" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv4_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv4_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv4_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv4_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv4_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv4_State_Statistics represents the /ndda-interface/interface/subinterface/ipv4/state/statistics YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv4_State_Statistics struct {
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv4_State_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv4_State_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv4_State_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv4_State_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv4_State_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv6 represents the /ndda-interface/interface/subinterface/ipv6 YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv6 struct {
	Config	*NddaInterface_Interface_Subinterface_Ipv6_Config	`path:"config" module:"ndda-interface"`
	IpPrefix	*string	`path:"ip-prefix" module:"ndda-interface"`
	State	*NddaInterface_Interface_Subinterface_Ipv6_State	`path:"state" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddaInterface_Interface_Subinterface_Ipv6 struct, which is a YANG list entry.
func (t *NddaInterface_Interface_Subinterface_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv6_Config represents the /ndda-interface/interface/subinterface/ipv6/config YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv6_Config struct {
	IpAddress	*string	`path:"ip-address" module:"ndda-interface"`
	IpCidr	*string	`path:"ip-cidr" module:"ndda-interface"`
	IpPrefix	*string	`path:"ip-prefix" module:"ndda-interface"`
	PrefixLength	*uint32	`path:"prefix-length" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv6_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv6_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv6_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv6_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv6_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv6_State represents the /ndda-interface/interface/subinterface/ipv6/state YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv6_State struct {
	IpAddress	*string	`path:"ip-address" module:"ndda-interface"`
	IpCidr	*string	`path:"ip-cidr" module:"ndda-interface"`
	IpPrefix	*string	`path:"ip-prefix" module:"ndda-interface"`
	PrefixLength	*uint32	`path:"prefix-length" module:"ndda-interface"`
	Reason	*string	`path:"reason" module:"ndda-interface"`
	Statistics	*NddaInterface_Interface_Subinterface_Ipv6_State_Statistics	`path:"statistics" module:"ndda-interface"`
	Status	E_NddaCommon_OperState	`path:"status" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv6_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv6_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv6_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv6_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv6_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_Ipv6_State_Statistics represents the /ndda-interface/interface/subinterface/ipv6/state/statistics YANG schema element.
type NddaInterface_Interface_Subinterface_Ipv6_State_Statistics struct {
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_Ipv6_State_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_Ipv6_State_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_Ipv6_State_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_Ipv6_State_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_Ipv6_State_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_State represents the /ndda-interface/interface/subinterface/state YANG schema element.
type NddaInterface_Interface_Subinterface_State struct {
	Index	*uint32	`path:"index" module:"ndda-interface"`
	InnerVlanId	*uint16	`path:"inner-vlan-id" module:"ndda-interface"`
	Kind	E_NddaCommon_SubinterfaceKind	`path:"kind" module:"ndda-interface"`
	OuterVlanId	*uint16	`path:"outer-vlan-id" module:"ndda-interface"`
	Reason	*string	`path:"reason" module:"ndda-interface"`
	Statistics	*NddaInterface_Interface_Subinterface_State_Statistics	`path:"statistics" module:"ndda-interface"`
	Status	E_NddaCommon_OperState	`path:"status" module:"ndda-interface"`
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaInterface_Interface_Subinterface_State_Statistics represents the /ndda-interface/interface/subinterface/state/statistics YANG schema element.
type NddaInterface_Interface_Subinterface_State_Statistics struct {
}

// IsYANGGoStruct ensures that NddaInterface_Interface_Subinterface_State_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaInterface_Interface_Subinterface_State_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaInterface_Interface_Subinterface_State_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaInterface_Interface_Subinterface_State_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaInterface_Interface_Subinterface_State_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaNetworkInstance_NetworkInstance represents the /ndda-network-instance/network-instance YANG schema element.
type NddaNetworkInstance_NetworkInstance struct {
	Config	*NddaNetworkInstance_NetworkInstance_Config	`path:"config" module:"ndda-network-instance"`
	State	*NddaNetworkInstance_NetworkInstance_State	`path:"state" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaNetworkInstance_NetworkInstance_Config represents the /ndda-network-instance/network-instance/config YANG schema element.
type NddaNetworkInstance_NetworkInstance_Config struct {
	Index	*uint32	`path:"index" module:"ndda-network-instance"`
	Interface	map[string]*NddaNetworkInstance_NetworkInstance_Config_Interface	`path:"interface" module:"ndda-network-instance"`
	Kind	E_NddaCommon_NiKind	`path:"kind" module:"ndda-network-instance"`
	Name	*string	`path:"name" module:"ndda-network-instance"`
	RouterId	*string	`path:"router-id" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_Config) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NddaNetworkInstance_NetworkInstance_Config struct. The keys of the list are populated from the input
// arguments.
func (t *NddaNetworkInstance_NetworkInstance_Config) NewInterface(Name string) (*NddaNetworkInstance_NetworkInstance_Config_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaNetworkInstance_NetworkInstance_Config_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NddaNetworkInstance_NetworkInstance_Config_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaNetworkInstance_NetworkInstance_Config_Interface represents the /ndda-network-instance/network-instance/config/interface YANG schema element.
type NddaNetworkInstance_NetworkInstance_Config_Interface struct {
	Name	*string	`path:"name" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_Config_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_Config_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddaNetworkInstance_NetworkInstance_Config_Interface struct, which is a YANG list entry.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_Config_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_Config_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaNetworkInstance_NetworkInstance_State represents the /ndda-network-instance/network-instance/state YANG schema element.
type NddaNetworkInstance_NetworkInstance_State struct {
	Index	*uint32	`path:"index" module:"ndda-network-instance"`
	Interface	map[string]*NddaNetworkInstance_NetworkInstance_State_Interface	`path:"interface" module:"ndda-network-instance"`
	Kind	E_NddaCommon_NiKind	`path:"kind" module:"ndda-network-instance"`
	Name	*string	`path:"name" module:"ndda-network-instance"`
	Reason	*string	`path:"reason" module:"ndda-network-instance"`
	RouterId	*string	`path:"router-id" module:"ndda-network-instance"`
	Statistics	*NddaNetworkInstance_NetworkInstance_State_Statistics	`path:"statistics" module:"ndda-network-instance"`
	Status	E_NddaCommon_OperState	`path:"status" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_State) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NddaNetworkInstance_NetworkInstance_State struct. The keys of the list are populated from the input
// arguments.
func (t *NddaNetworkInstance_NetworkInstance_State) NewInterface(Name string) (*NddaNetworkInstance_NetworkInstance_State_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NddaNetworkInstance_NetworkInstance_State_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NddaNetworkInstance_NetworkInstance_State_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaNetworkInstance_NetworkInstance_State_Interface represents the /ndda-network-instance/network-instance/state/interface YANG schema element.
type NddaNetworkInstance_NetworkInstance_State_Interface struct {
	Name	*string	`path:"name" module:"ndda-network-instance"`
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_State_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_State_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddaNetworkInstance_NetworkInstance_State_Interface struct, which is a YANG list entry.
func (t *NddaNetworkInstance_NetworkInstance_State_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_State_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_State_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_State_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaNetworkInstance_NetworkInstance_State_Statistics represents the /ndda-network-instance/network-instance/state/statistics YANG schema element.
type NddaNetworkInstance_NetworkInstance_State_Statistics struct {
}

// IsYANGGoStruct ensures that NddaNetworkInstance_NetworkInstance_State_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaNetworkInstance_NetworkInstance_State_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaNetworkInstance_NetworkInstance_State_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaNetworkInstance_NetworkInstance_State_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaNetworkInstance_NetworkInstance_State_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaSystem_System represents the /ndda-system/system YANG schema element.
type NddaSystem_System struct {
	Platform	*NddaSystem_System_Platform	`path:"platform" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaSystem_System_Platform represents the /ndda-system/system/platform YANG schema element.
type NddaSystem_System_Platform struct {
	Config	*NddaSystem_System_Platform_Config	`path:"config" module:"ndda-system"`
	State	*NddaSystem_System_Platform_State	`path:"state" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System_Platform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System_Platform) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System_Platform) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System_Platform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System_Platform) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaSystem_System_Platform_Config represents the /ndda-system/system/platform/config YANG schema element.
type NddaSystem_System_Platform_Config struct {
	Index	*uint32	`path:"index" module:"ndda-system"`
	Kind	E_NddaCommon_DeviceKind	`path:"kind" module:"ndda-system"`
	Name	*string	`path:"name" module:"ndda-system"`
	Version	*string	`path:"version" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System_Platform_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System_Platform_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System_Platform_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System_Platform_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System_Platform_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaSystem_System_Platform_State represents the /ndda-system/system/platform/state YANG schema element.
type NddaSystem_System_Platform_State struct {
	Index	*uint32	`path:"index" module:"ndda-system"`
	Kind	E_NddaCommon_DeviceKind	`path:"kind" module:"ndda-system"`
	Name	*string	`path:"name" module:"ndda-system"`
	Reason	*string	`path:"reason" module:"ndda-system"`
	Statistics	*NddaSystem_System_Platform_State_Statistics	`path:"statistics" module:"ndda-system"`
	Status	E_NddaCommon_OperState	`path:"status" module:"ndda-system"`
	Version	*string	`path:"version" module:"ndda-system"`
}

// IsYANGGoStruct ensures that NddaSystem_System_Platform_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System_Platform_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System_Platform_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System_Platform_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System_Platform_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NddaSystem_System_Platform_State_Statistics represents the /ndda-system/system/platform/state/statistics YANG schema element.
type NddaSystem_System_Platform_State_Statistics struct {
}

// IsYANGGoStruct ensures that NddaSystem_System_Platform_State_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddaSystem_System_Platform_State_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddaSystem_System_Platform_State_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddaSystem_System_Platform_State_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddaSystem_System_Platform_State_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_NddaCommon_DeviceKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_DeviceKind. An additional value named
// NddaCommon_DeviceKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_DeviceKind int64

// IsYANGGoEnum ensures that NddaCommon_DeviceKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_DeviceKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_DeviceKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_DeviceKind.
func (E_NddaCommon_DeviceKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_NddaCommon_DeviceKind.
func (e E_NddaCommon_DeviceKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_DeviceKind")
}

const (
	// NddaCommon_DeviceKind_UNSET corresponds to the value UNSET of NddaCommon_DeviceKind
	NddaCommon_DeviceKind_UNSET E_NddaCommon_DeviceKind = 0
	// NddaCommon_DeviceKind_SRL corresponds to the value SRL of NddaCommon_DeviceKind
	NddaCommon_DeviceKind_SRL E_NddaCommon_DeviceKind = 1
	// NddaCommon_DeviceKind_SROS corresponds to the value SROS of NddaCommon_DeviceKind
	NddaCommon_DeviceKind_SROS E_NddaCommon_DeviceKind = 2
)


// E_NddaCommon_InterfaceKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_InterfaceKind. An additional value named
// NddaCommon_InterfaceKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_InterfaceKind int64

// IsYANGGoEnum ensures that NddaCommon_InterfaceKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_InterfaceKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_InterfaceKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_InterfaceKind.
func (E_NddaCommon_InterfaceKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_NddaCommon_InterfaceKind.
func (e E_NddaCommon_InterfaceKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_InterfaceKind")
}

const (
	// NddaCommon_InterfaceKind_UNSET corresponds to the value UNSET of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_UNSET E_NddaCommon_InterfaceKind = 0
	// NddaCommon_InterfaceKind_INTERFACE corresponds to the value INTERFACE of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_INTERFACE E_NddaCommon_InterfaceKind = 1
	// NddaCommon_InterfaceKind_LOOPBACK corresponds to the value LOOPBACK of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_LOOPBACK E_NddaCommon_InterfaceKind = 2
	// NddaCommon_InterfaceKind_IRB corresponds to the value IRB of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_IRB E_NddaCommon_InterfaceKind = 3
	// NddaCommon_InterfaceKind_VXLAN corresponds to the value VXLAN of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_VXLAN E_NddaCommon_InterfaceKind = 4
	// NddaCommon_InterfaceKind_MPLS corresponds to the value MPLS of NddaCommon_InterfaceKind
	NddaCommon_InterfaceKind_MPLS E_NddaCommon_InterfaceKind = 5
)


// E_NddaCommon_NiKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_NiKind. An additional value named
// NddaCommon_NiKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_NiKind int64

// IsYANGGoEnum ensures that NddaCommon_NiKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_NiKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_NiKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_NiKind.
func (E_NddaCommon_NiKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_NddaCommon_NiKind.
func (e E_NddaCommon_NiKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_NiKind")
}

const (
	// NddaCommon_NiKind_UNSET corresponds to the value UNSET of NddaCommon_NiKind
	NddaCommon_NiKind_UNSET E_NddaCommon_NiKind = 0
	// NddaCommon_NiKind_ROUTED corresponds to the value ROUTED of NddaCommon_NiKind
	NddaCommon_NiKind_ROUTED E_NddaCommon_NiKind = 1
	// NddaCommon_NiKind_BRIDGED corresponds to the value BRIDGED of NddaCommon_NiKind
	NddaCommon_NiKind_BRIDGED E_NddaCommon_NiKind = 2
)


// E_NddaCommon_OperState is a derived int64 type which is used to represent
// the enumerated node NddaCommon_OperState. An additional value named
// NddaCommon_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_OperState int64

// IsYANGGoEnum ensures that NddaCommon_OperState implements the yang.GoEnum
// interface. This ensures that NddaCommon_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_OperState.
func (E_NddaCommon_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_NddaCommon_OperState.
func (e E_NddaCommon_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_OperState")
}

const (
	// NddaCommon_OperState_UNSET corresponds to the value UNSET of NddaCommon_OperState
	NddaCommon_OperState_UNSET E_NddaCommon_OperState = 0
	// NddaCommon_OperState_UP corresponds to the value UP of NddaCommon_OperState
	NddaCommon_OperState_UP E_NddaCommon_OperState = 1
	// NddaCommon_OperState_DOWN corresponds to the value DOWN of NddaCommon_OperState
	NddaCommon_OperState_DOWN E_NddaCommon_OperState = 2
)


// E_NddaCommon_SubinterfaceKind is a derived int64 type which is used to represent
// the enumerated node NddaCommon_SubinterfaceKind. An additional value named
// NddaCommon_SubinterfaceKind_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddaCommon_SubinterfaceKind int64

// IsYANGGoEnum ensures that NddaCommon_SubinterfaceKind implements the yang.GoEnum
// interface. This ensures that NddaCommon_SubinterfaceKind can be identified as a
// mapped type for a YANG enumeration.
func (E_NddaCommon_SubinterfaceKind) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddaCommon_SubinterfaceKind.
func (E_NddaCommon_SubinterfaceKind) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_NddaCommon_SubinterfaceKind.
func (e E_NddaCommon_SubinterfaceKind) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddaCommon_SubinterfaceKind")
}

const (
	// NddaCommon_SubinterfaceKind_UNSET corresponds to the value UNSET of NddaCommon_SubinterfaceKind
	NddaCommon_SubinterfaceKind_UNSET E_NddaCommon_SubinterfaceKind = 0
	// NddaCommon_SubinterfaceKind_ROUTED corresponds to the value ROUTED of NddaCommon_SubinterfaceKind
	NddaCommon_SubinterfaceKind_ROUTED E_NddaCommon_SubinterfaceKind = 1
	// NddaCommon_SubinterfaceKind_BRIDGED corresponds to the value BRIDGED of NddaCommon_SubinterfaceKind
	NddaCommon_SubinterfaceKind_BRIDGED E_NddaCommon_SubinterfaceKind = 2
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_NddaCommon_DeviceKind": {
		1: {Name: "SRL"},
		2: {Name: "SROS"},
	},
	"E_NddaCommon_InterfaceKind": {
		1: {Name: "INTERFACE"},
		2: {Name: "LOOPBACK"},
		3: {Name: "IRB"},
		4: {Name: "VXLAN"},
		5: {Name: "MPLS"},
	},
	"E_NddaCommon_NiKind": {
		1: {Name: "ROUTED"},
		2: {Name: "BRIDGED"},
	},
	"E_NddaCommon_OperState": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
	},
	"E_NddaCommon_SubinterfaceKind": {
		1: {Name: "ROUTED"},
		2: {Name: "BRIDGED"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6f, 0x73, 0xda, 0xc6,
		0xf6, 0x7e, 0xef, 0x4f, 0xa1, 0xaa, 0xed, 0x14, 0x5a, 0x2b, 0x08, 0x02, 0x38, 0xb8, 0xd3, 0x49,
		0xfd, 0xfb, 0xa5, 0x99, 0x9b, 0x69, 0x92, 0x9b, 0x69, 0xee, 0xdc, 0x17, 0x25, 0x34, 0x95, 0x41,
		0x76, 0x34, 0xc6, 0xc2, 0xa3, 0x3f, 0xce, 0x3f, 0xbb, 0x9f, 0xfd, 0x0e, 0x48, 0x80, 0x40, 0x12,
		0x3a, 0x67, 0x57, 0x12, 0x12, 0x7e, 0xfa, 0xa2, 0x76, 0xf0, 0xae, 0x90, 0x76, 0x9f, 0x73, 0x9e,
		0xb3, 0x7b, 0x1e, 0x9d, 0xfd, 0x7a, 0xa4, 0x28, 0x8a, 0xa2, 0xbe, 0x36, 0xae, 0x4d, 0xf5, 0x54,
		0x51, 0x27, 0xe6, 0xad, 0x35, 0x36, 0xd5, 0xe3, 0xe0, 0xd3, 0xdf, 0x2d, 0x7b, 0xa2, 0x9e, 0x2a,
		0xed, 0xf0, 0x9f, 0xff, 0x3f, 0xb3, 0x2f, 0xac, 0x4b, 0xf5, 0x54, 0xd1, 0xc3, 0x0f, 0x9e, 0x59,
		0x8e, 0x7a, 0xaa, 0x04, 0x97, 0x58, 0x7c, 0x60, 0xd9, 0x9e, 0xe9, 0x5c, 0x18, 0x63, 0x73, 0xe3,
		0xe3, 0x8d, 0x6f, 0x58, 0x37, 0x39, 0xde, 0x6c, 0xb0, 0xf9, 0x65, 0xab, 0x8f, 0xb7, 0xbf, 0x74,
		0xf5, 0x87, 0x37, 0x8e, 0x79, 0x61, 0x7d, 0x8a, 0x7d, 0xd1, 0xc6, 0x97, 0xd9, 0x93, 0x89, 0xa1,
		0x59, 0x17, 0x5b, 0x5f, 0xb5, 0x68, 0xf2, 0x76, 0xe6, 0x3b, 0x09, 0xf7, 0xb9, 0xbe, 0x1d, 0xf3,
		0xf3, 0xc7, 0x99, 0x33, 0xbf, 0x23, 0xf5, 0x26, 0xf8, 0xa6, 0xe3, 0xe4, 0x86, 0xff, 0x32, 0xdc,
		0x33, 0xe7, 0xd2, 0xbf, 0x36, 0x6d, 0x4f, 0x3d, 0x55, 0x3c, 0xc7, 0x37, 0x53, 0x1a, 0x46, 0x5a,
		0xad, 0x6e, 0x2c, 0xd6, 0xf2, 0x7e, 0xe3, 0x93, 0xfb, 0xad, 0x67, 0xde, 0x1e, 0xf0, 0xd5, 0x1f,
		0xc6, 0xcb, 0x51, 0x4a, 0x79, 0x9a, 0xe5, 0x80, 0x84, 0xed, 0x52, 0xee, 0x30, 0x79, 0x0a, 0x32,
		0xa7, 0x82, 0x32, 0x25, 0x8c, 0xa9, 0xa1, 0x4e, 0x11, 0x7b, 0xaa, 0xd8, 0x53, 0xc6, 0x9b, 0xba,
		0xe4, 0x29, 0x4c, 0x99, 0xca, 0xcc, 0x29, 0x5d, 0x35, 0xb8, 0x0a, 0x26, 0x25, 0x63, 0x0c, 0x96,
		0xc3, 0xba, 0x68, 0x9d, 0xf1, 0x34, 0xe1, 0x34, 0xeb, 0x19, 0xcd, 0xb2, 0xa6, 0x9b, 0x33, 0xed,
		0x02, 0xd3, 0xcf, 0x85, 0x81, 0x30, 0x1c, 0x84, 0x61, 0x21, 0x06, 0x8f, 0xdd, 0x30, 0xc9, 0x80,
		0xcb, 0xea, 0x2b, 0xff, 0xf3, 0xf9, 0xc6, 0xe4, 0x8d, 0xf8, 0xca, 0xf1, 0x6a, 0x04, 0x8c, 0x6c,
		0xb8, 0x83, 0x2e, 0xa1, 0xed, 0x6f, 0xb6, 0x7f, 0x3d, 0xbf, 0x9f, 0x8c, 0xa7, 0x3a, 0x12, 0x78,
		0x5e, 0x75, 0x6a, 0x8c, 0x6f, 0xe8, 0x16, 0xb0, 0x68, 0x0d, 0x0b, 0x80, 0x05, 0xc4, 0x46, 0xfc,
		0x7c, 0x36, 0x9b, 0x9a, 0x86, 0xcd, 0x81, 0x7e, 0xbb, 0x20, 0x38, 0x6b, 0x17, 0xc6, 0x74, 0x7a,
		0x6e, 0x8c, 0xaf, 0x78, 0xb8, 0x5e, 0x77, 0x03, 0xc0, 0x01, 0xf0, 0xea, 0x02, 0xfc, 0x92, 0x03,
		0xeb, 0x4b, 0x80, 0x19, 0x60, 0xae, 0x32, 0x98, 0xb5, 0x6b, 0xf3, 0xfa, 0xdc, 0x74, 0x58, 0x98,
		0x5e, 0xf6, 0x01, 0xb4, 0x01, 0xed, 0x2a, 0x43, 0xdb, 0x0e, 0x6e, 0x89, 0x01, 0xec, 0x45, 0x0f,
		0xc0, 0x1a, 0xb0, 0x8e, 0x8f, 0x78, 0x36, 0x32, 0x36, 0x30, 0xfd, 0x84, 0xd0, 0xf6, 0xa5, 0x69,
		0x5f, 0x7a, 0x1f, 0xd4, 0x53, 0x65, 0x48, 0x1a, 0x28, 0xda, 0x04, 0x2e, 0xae, 0xfc, 0xca, 0xb2,
		0xc9, 0x33, 0xce, 0x04, 0x76, 0xac, 0xdb, 0x7f, 0x8d, 0xa9, 0x6f, 0xa6, 0xef, 0xac, 0xa5, 0xf6,
		0x7b, 0xee, 0x18, 0x63, 0xcf, 0x9a, 0xd9, 0xcf, 0xac, 0x4b, 0xcb, 0x73, 0xe7, 0x5f, 0x4c, 0xee,
		0x7f, 0x7f, 0xcc, 0x18, 0x0a, 0xe3, 0x53, 0xe9, 0x43, 0xd1, 0xe9, 0xf5, 0x4a, 0x1c, 0x8c, 0xa3,
		0x7c, 0x5a, 0x8d, 0x08, 0x88, 0x7d, 0x63, 0x78, 0x9e, 0xe9, 0xd8, 0x64, 0xc8, 0xaa, 0xc3, 0x33,
		0xed, 0x4f, 0x43, 0xfb, 0xa2, 0x6b, 0x03, 0xe5, 0x9b, 0x5f, 0xbf, 0xfd, 0xee, 0xfb, 0xbf, 0xde,
		0xf9, 0xba, 0xde, 0xe9, 0x37, 0x9a, 0x77, 0x3f, 0xfd, 0xf2, 0xf7, 0x3f, 0x8f, 0x8e, 0x7f, 0x68,
		0xbd, 0x3f, 0xfd, 0xf9, 0xa9, 0x36, 0xfa, 0x31, 0xdb, 0xe2, 0x47, 0x05, 0xb0, 0x04, 0x8f, 0x21,
		0xc0, 0x0e, 0x60, 0x07, 0xb0, 0x03, 0xd8, 0x01, 0xec, 0x70, 0x40, 0xec, 0xc0, 0x4a, 0x68, 0x9d,
		0xd9, 0xf6, 0xcc, 0x33, 0xe6, 0x53, 0xb1, 0x3b, 0xaf, 0xe5, 0x8e, 0x3f, 0x98, 0xd7, 0xc6, 0x8d,
		0xb1, 0xb0, 0x5f, 0xb5, 0x15, 0xf8, 0xad, 0x65, 0x8e, 0xa2, 0xb5, 0xfe, 0x6d, 0x67, 0xca, 0x32,
		0xb8, 0x92, 0xe7, 0xf8, 0x63, 0x2f, 0xe4, 0x29, 0xf5, 0xf5, 0x64, 0x62, 0xbc, 0x58, 0xf6, 0x7e,
		0xbf, 0xfe, 0x2d, 0xa4, 0x93, 0x23, 0xda, 0x13, 0x26, 0x3c, 0xdd, 0x6e, 0x26, 0xa4, 0xf8, 0xb9,
		0x0c, 0xab, 0x40, 0x82, 0xb5, 0x88, 0x04, 0x6b, 0x26, 0x53, 0xad, 0x57, 0xb7, 0xa6, 0x71, 0xe1,
		0x98, 0x3b, 0x47, 0x6c, 0x49, 0x4e, 0x27, 0x3b, 0xda, 0xbc, 0x09, 0x21, 0xfd, 0xe8, 0x51, 0x88,
		0xdd, 0xd6, 0x02, 0x12, 0x12, 0xc0, 0x73, 0x3d, 0xc3, 0x23, 0x20, 0x2f, 0x68, 0x26, 0x99, 0xdb,
		0xef, 0x00, 0x7a, 0xc8, 0xed, 0x23, 0xb6, 0xae, 0x57, 0x6c, 0x8d, 0xdc, 0x3e, 0x2c, 0x00, 0x5b,
		0xea, 0xc8, 0xed, 0x03, 0xe0, 0x00, 0x38, 0x72, 0xfb, 0x00, 0x33, 0xc0, 0x4c, 0x05, 0x33, 0x72,
		0xfb, 0x80, 0xf6, 0xa1, 0x42, 0x1b, 0xb9, 0x7d, 0xc0, 0x3a, 0x2f, 0x58, 0x23, 0x7b, 0x93, 0x95,
		0xb2, 0x40, 0xf6, 0x06, 0xd9, 0x9b, 0x58, 0x07, 0xe4, 0xf6, 0xc1, 0x0e, 0x60, 0x07, 0xb0, 0x03,
		0xd8, 0x01, 0xec, 0x50, 0x3b, 0x76, 0x70, 0x4c, 0xc3, 0x9d, 0xd9, 0x74, 0x7e, 0x08, 0xdb, 0x83,
		0x21, 0xc0, 0x10, 0xb1, 0x11, 0x77, 0x3d, 0xc7, 0xb2, 0x2f, 0x59, 0x1c, 0x51, 0x00, 0xa2, 0x5d,
		0xcf, 0xf0, 0x2c, 0xd7, 0xb3, 0xc6, 0x2e, 0x1d, 0xd5, 0x91, 0x3e, 0x34, 0x64, 0xb7, 0x81, 0xec,
		0xfa, 0x22, 0x3b, 0x2b, 0x65, 0xbf, 0x6a, 0x68, 0xd9, 0xda, 0x6c, 0xec, 0x99, 0x9e, 0x4b, 0x1f,
		0xc0, 0x75, 0xb6, 0x76, 0xd9, 0x95, 0x38, 0x0e, 0x3c, 0xc2, 0x25, 0x03, 0x4c, 0x04, 0x68, 0x12,
		0x80, 0x13, 0x05, 0x9e, 0x34, 0x00, 0xa5, 0x81, 0x28, 0x07, 0x48, 0x66, 0x28, 0x42, 0x9c, 0x33,
		0xb2, 0x0b, 0x8e, 0xcd, 0xd8, 0x17, 0xd3, 0x99, 0x69, 0xe7, 0x86, 0x6b, 0x4e, 0xb4, 0xf1, 0xcc,
		0xb7, 0x3d, 0xd3, 0xe9, 0x77, 0x39, 0xd3, 0x17, 0xa2, 0xf1, 0x09, 0xa3, 0xcb, 0x33, 0xf3, 0xc2,
		0xf0, 0xa7, 0x8b, 0x61, 0xd3, 0x39, 0x5f, 0xf5, 0x87, 0x61, 0x5f, 0x9a, 0xe4, 0x78, 0x8a, 0xbf,
		0x14, 0x90, 0x5a, 0x12, 0x48, 0xc6, 0xc3, 0xb1, 0xb8, 0x58, 0xb4, 0xbf, 0x44, 0x74, 0x2c, 0xb0,
		0x64, 0x90, 0x5a, 0x3a, 0xe4, 0x3d, 0x64, 0xed, 0x27, 0xdd, 0x6e, 0xff, 0xa4, 0xdb, 0xd5, 0x4f,
		0x1e, 0x9f, 0xe8, 0x83, 0x5e, 0xaf, 0xdd, 0x6f, 0xf7, 0xf6, 0x38, 0x8a, 0x47, 0xc5, 0xb4, 0x1e,
		0xe5, 0xb4, 0x86, 0x21, 0xcc, 0xf2, 0x9c, 0x9b, 0x7c, 0xdb, 0x1a, 0x1b, 0xae, 0xa7, 0xdd, 0x18,
		0xe3, 0x2b, 0x51, 0x7e, 0xdb, 0xbe, 0x06, 0x88, 0x0e, 0x44, 0x07, 0xa2, 0x03, 0xd1, 0x81, 0xe8,
		0x40, 0x74, 0xd5, 0x20, 0xba, 0x99, 0xef, 0x09, 0x2f, 0xe0, 0x22, 0x7d, 0x41, 0x6c, 0x20, 0x36,
		0x10, 0x1b, 0x88, 0x0d, 0xc4, 0x06, 0x62, 0xab, 0x0e, 0xb1, 0x49, 0x2f, 0xe1, 0x92, 0x2e, 0x02,
		0xaa, 0x03, 0xd5, 0x81, 0xea, 0x40, 0x75, 0xa0, 0x3a, 0x50, 0x5d, 0x09, 0x54, 0x27, 0x95, 0xc6,
		0x23, 0x16, 0x21, 0x58, 0xb5, 0xa7, 0x16, 0x23, 0x58, 0xbc, 0x62, 0xdd, 0x22, 0xa7, 0x84, 0x15,
		0x7a, 0x79, 0x82, 0xb7, 0xf3, 0x2b, 0x2f, 0xfe, 0x1f, 0x5e, 0xb9, 0xa0, 0xf4, 0xb7, 0xcf, 0x4c,
		0x7d, 0xfb, 0x2e, 0x04, 0x1d, 0x10, 0x74, 0x24, 0x44, 0x88, 0x37, 0xa6, 0xa3, 0xed, 0xaa, 0x38,
		0x90, 0x84, 0x91, 0x72, 0x5e, 0x37, 0xde, 0x6b, 0xb9, 0x92, 0xac, 0x21, 0xe1, 0xb8, 0x03, 0xa9,
		0x9a, 0x11, 0xfe, 0x79, 0xfa, 0x69, 0x1c, 0x71, 0x4b, 0x8f, 0xb6, 0xae, 0xce, 0xe9, 0x10, 0x9a,
		0x6b, 0xd5, 0xb6, 0x88, 0xc4, 0xfc, 0xde, 0xcb, 0xaa, 0x23, 0x91, 0x71, 0xfc, 0x47, 0x6c, 0x78,
		0x33, 0x6b, 0xea, 0x28, 0x15, 0xd3, 0x33, 0xed, 0x06, 0x42, 0xbd, 0x7d, 0xfb, 0x4e, 0xa0, 0xe4,
		0xe3, 0xde, 0x19, 0xaa, 0xa6, 0x89, 0xf9, 0x49, 0x24, 0xe3, 0x3b, 0xef, 0x76, 0x38, 0x1b, 0x04,
		0x34, 0xb8, 0x1d, 0xe6, 0x1e, 0x01, 0x09, 0x8e, 0x55, 0xdb, 0x26, 0xf0, 0x2d, 0xdb, 0x7b, 0xdc,
		0x11, 0xd8, 0x18, 0x38, 0xc1, 0x02, 0x1f, 0x0b, 0xfc, 0x9c, 0x86, 0x6c, 0x30, 0x18, 0x0c, 0xb0,
		0xa0, 0x97, 0xd9, 0xbb, 0xb6, 0x6c, 0xdb, 0x74, 0xb4, 0xdb, 0xa9, 0x61, 0x6b, 0xd6, 0x44, 0x84,
		0x86, 0xa2, 0xdd, 0x41, 0x47, 0xa0, 0xa3, 0x3d, 0xd1, 0x11, 0x0f, 0x82, 0x51, 0x18, 0xf6, 0xc1,
		0x47, 0x29, 0xbb, 0xa7, 0xe0, 0x23, 0xee, 0x90, 0x75, 0xf5, 0x41, 0x17, 0x7c, 0x24, 0xc3, 0x47,
		0xa4, 0xfa, 0x8c, 0x31, 0xeb, 0x27, 0xd6, 0xe0, 0x03, 0xfb, 0x80, 0x7d, 0x0a, 0x61, 0x9f, 0xe8,
		0x66, 0x9e, 0xc6, 0x00, 0x23, 0x77, 0xa7, 0x96, 0xb9, 0x63, 0x9b, 0xaf, 0x69, 0xce, 0x7c, 0x4f,
		0x26, 0x54, 0xdc, 0xec, 0x0e, 0x63, 0x85, 0xb1, 0x22, 0x54, 0x44, 0xa8, 0x88, 0x50, 0x11, 0xa1,
		0x22, 0xbb, 0xc5, 0xde, 0xb4, 0x08, 0x11, 0x9a, 0x6f, 0x91, 0x32, 0x3a, 0x0a, 0x23, 0xff, 0x18,
		0xb9, 0xf8, 0xce, 0xa3, 0x13, 0xb2, 0xc7, 0x68, 0x97, 0x22, 0x81, 0x96, 0x6f, 0x60, 0xe5, 0x19,
		0xaa, 0xa4, 0x47, 0x40, 0xda, 0xaa, 0x64, 0x55, 0x42, 0xf6, 0x11, 0x0e, 0xb1, 0x40, 0xf7, 0x84,
		0x56, 0xd9, 0x65, 0xeb, 0x48, 0x87, 0x00, 0x89, 0x45, 0x58, 0xc4, 0xcd, 0x6d, 0x97, 0x61, 0x10,
		0xf3, 0xd6, 0xb5, 0x4a, 0xe3, 0x6a, 0xc6, 0x41, 0x9b, 0xc4, 0xfc, 0xf1, 0xaa, 0x92, 0xcc, 0x25,
		0xaa, 0x02, 0x62, 0x93, 0x45, 0xe6, 0x12, 0x06, 0xbc, 0xf6, 0xbd, 0x28, 0xa2, 0xc1, 0xee, 0x60,
		0xd7, 0x45, 0x24, 0x58, 0x16, 0xb3, 0x34, 0xa2, 0xc2, 0x35, 0xe2, 0x01, 0x35, 0x63, 0x32, 0x71,
		0x4c, 0xd7, 0xe5, 0x8f, 0xff, 0xda, 0x2f, 0xae, 0xae, 0x71, 0x5c, 0x4a, 0x71, 0x33, 0x2e, 0xac,
		0x65, 0xe0, 0x9d, 0x1b, 0xcc, 0x65, 0xe1, 0x9e, 0x1b, 0xec, 0x73, 0x83, 0x7f, 0x9e, 0x66, 0x20,
		0xb8, 0x3a, 0x61, 0xce, 0x3f, 0x7b, 0xe7, 0x20, 0x31, 0x06, 0x10, 0x44, 0xbb, 0xc2, 0x2c, 0xca,
		0x98, 0x14, 0x18, 0xb1, 0x4a, 0xde, 0xc5, 0x2e, 0xd0, 0x68, 0x0c, 0x75, 0x6d, 0x30, 0xba, 0x1b,
		0xb6, 0xb5, 0xc1, 0x28, 0xf8, 0xb5, 0xbd, 0xf8, 0x11, 0xfc, 0xde, 0x19, 0xea, 0x5a, 0x77, 0xf9,
		0x7b, 0x6f, 0xa8, 0x6b, 0xbd, 0x51, 0xf3, 0xdd, 0xbb, 0x47, 0xcd, 0xaf, 0x8f, 0xef, 0xf9, 0x1d,
		0xf9, 0x53, 0x3f, 0x2a, 0x68, 0x61, 0xca, 0x29, 0xd1, 0x68, 0xdd, 0x68, 0x63, 0x6b, 0xe2, 0x48,
		0xf9, 0xc2, 0xc5, 0x05, 0xe0, 0x08, 0xe1, 0x08, 0x0f, 0xdf, 0x11, 0x06, 0xc3, 0xae, 0x7d, 0xb4,
		0xbc, 0x0f, 0xda, 0x87, 0x99, 0xeb, 0x69, 0xe7, 0x96, 0x07, 0xb7, 0xb8, 0xab, 0x63, 0x2b, 0xfc,
		0xb2, 0xe6, 0x5d, 0x63, 0xd8, 0xd6, 0x3a, 0xa3, 0xe5, 0x3f, 0x1e, 0x0f, 0x75, 0xad, 0x33, 0x6a,
		0xd6, 0xd7, 0x6d, 0xde, 0x88, 0x79, 0x94, 0xa8, 0xe3, 0x14, 0x0b, 0xe2, 0xe1, 0x3a, 0xe1, 0x3a,
		0xe1, 0x3a, 0xe1, 0x3a, 0x6b, 0xea, 0x3a, 0x43, 0x1c, 0x4c, 0x97, 0x05, 0xd8, 0x05, 0xdd, 0xe7,
		0xe6, 0x65, 0xe0, 0x42, 0xe1, 0x42, 0x0f, 0xda, 0x85, 0xb2, 0x5f, 0x41, 0xd8, 0xc6, 0xfa, 0x89,
		0x40, 0x57, 0xb1, 0xbc, 0xfe, 0xf2, 0x3f, 0x31, 0x98, 0x29, 0xb2, 0x79, 0x7e, 0x49, 0x23, 0x8f,
		0x5d, 0x46, 0xf2, 0x95, 0x85, 0xd5, 0x75, 0x72, 0xc8, 0x64, 0x0b, 0xc2, 0x6f, 0x73, 0x68, 0x25,
		0xf4, 0x00, 0x45, 0x0d, 0x6d, 0xb7, 0x33, 0xe8, 0x0e, 0xfa, 0x27, 0x9d, 0x41, 0xaf, 0x42, 0x63,
		0x7c, 0x54, 0x4e, 0xaf, 0xc2, 0x28, 0x39, 0xd7, 0x6d, 0x76, 0xa6, 0xca, 0x60, 0xd5, 0x4f, 0x48,
		0x6d, 0x30, 0x0f, 0x17, 0x5b, 0xac, 0x34, 0x91, 0x22, 0x28, 0x3d, 0x78, 0x71, 0x73, 0xdb, 0x25,
		0xe9, 0x0f, 0xe8, 0xa3, 0x4a, 0x7a, 0x11, 0x85, 0xbd, 0x7a, 0x14, 0x5e, 0x35, 0xd6, 0x44, 0x55,
		0x88, 0x04, 0x5a, 0xfd, 0xb4, 0x85, 0x74, 0x35, 0x44, 0x6c, 0xe9, 0xc6, 0x79, 0x2f, 0x32, 0x41,
		0x1d, 0xb1, 0xb2, 0x81, 0x12, 0x6d, 0x36, 0xa8, 0xbc, 0xc0, 0xb6, 0x57, 0x6a, 0x0d, 0x0b, 0x45,
		0x26, 0xd9, 0xdd, 0x81, 0xad, 0x3e, 0x08, 0x5b, 0x45, 0xb2, 0x1b, 0xab, 0x6c, 0xac, 0xb2, 0x8b,
		0xde, 0xa8, 0x44, 0xb2, 0x1b, 0xc9, 0xee, 0x74, 0x5f, 0x88, 0x64, 0x37, 0x1c, 0x21, 0x32, 0x36,
		0x70, 0x8b, 0x48, 0x76, 0x17, 0xb9, 0x6d, 0x01, 0xd7, 0x09, 0xd7, 0x09, 0xd7, 0x09, 0xd7, 0x89,
		0x64, 0x37, 0x92, 0xdd, 0x70, 0xa1, 0x0a, 0x92, 0xdd, 0x3c, 0xac, 0x23, 0xd9, 0x2d, 0x78, 0x19,
		0x24, 0xbb, 0x0b, 0x1f, 0x5a, 0x24, 0xbb, 0xf7, 0x4b, 0xc9, 0x8e, 0x69, 0xb8, 0x33, 0x5b, 0x9c,
		0x8b, 0xc3, 0xfe, 0x20, 0x61, 0x90, 0xf0, 0x41, 0x93, 0xb0, 0xeb, 0x39, 0x96, 0x7d, 0x29, 0xb5,
		0x66, 0xa9, 0x80, 0xb5, 0x47, 0x0e, 0xd3, 0x10, 0xb6, 0x78, 0xd6, 0x81, 0x1c, 0x89, 0x23, 0x01,
		0xab, 0x87, 0xd5, 0x97, 0x61, 0xf5, 0x82, 0x32, 0xad, 0xb5, 0xb5, 0x08, 0xcb, 0xb5, 0x04, 0x8e,
		0xae, 0x49, 0xb0, 0x55, 0x31, 0x01, 0x17, 0xef, 0x70, 0x9b, 0xf2, 0xfc, 0x8e, 0x2f, 0xe9, 0x73,
		0x7c, 0x64, 0xdc, 0xe1, 0x6f, 0x0e, 0x3c, 0xca, 0x60, 0x1d, 0xf4, 0x93, 0xca, 0xaf, 0x02, 0xd5,
		0xc5, 0x98, 0x65, 0x25, 0x05, 0xbc, 0x45, 0xcd, 0x05, 0xb8, 0xdc, 0x49, 0x91, 0x73, 0xdf, 0x6a,
		0x25, 0x8a, 0xa9, 0xfd, 0x6e, 0x7e, 0xe6, 0x64, 0xab, 0xd4, 0x97, 0x96, 0xeb, 0x9d, 0x79, 0x1e,
		0xb1, 0x62, 0xce, 0x2b, 0xcb, 0xfe, 0x6d, 0x6a, 0xce, 0x0d, 0xdb, 0xa5, 0xf9, 0x5a, 0xf5, 0x95,
		0xf1, 0x29, 0xd2, 0xa3, 0x4f, 0x39, 0xdf, 0xea, 0xdf, 0xce, 0xc4, 0x74, 0xcc, 0xc9, 0xff, 0xcd,
		0x1f, 0xc4, 0xf6, 0xa7, 0xd3, 0xea, 0x17, 0x97, 0x23, 0x54, 0x99, 0x92, 0xc1, 0x57, 0x41, 0x65,
		0xb4, 0xfa, 0xac, 0x32, 0x5a, 0x7d, 0x94, 0xd1, 0x42, 0x19, 0xad, 0xc4, 0x86, 0x28, 0xa3, 0x05,
		0x65, 0x31, 0x94, 0xc5, 0x58, 0xe7, 0x60, 0x9d, 0x73, 0xe8, 0xaa, 0x90, 0x7e, 0x8d, 0x95, 0xc5,
		0xa7, 0x77, 0x43, 0x5d, 0x1b, 0x18, 0xda, 0xc5, 0x99, 0xf6, 0x7c, 0xf4, 0x55, 0x3f, 0xee, 0xde,
		0x37, 0x4f, 0x9b, 0x8d, 0xed, 0xcf, 0x4e, 0x9b, 0x5f, 0xf5, 0xe3, 0xde, 0x7d, 0xa3, 0x91, 0xf0,
		0x97, 0xa7, 0x49, 0xd7, 0x68, 0xde, 0x35, 0x1a, 0x8d, 0x50, 0x01, 0xb2, 0xa1, 0x0a, 0x19, 0xea,
		0xed, 0xd1, 0xd3, 0xc5, 0xaf, 0xc1, 0xff, 0x57, 0xba, 0x12, 0x52, 0xe3, 0x26, 0xf4, 0xc9, 0x70,
		0xa7, 0x70, 0xa7, 0x87, 0xee, 0x4e, 0x0f, 0x45, 0x64, 0x57, 0x37, 0xe7, 0xda, 0x88, 0x6a, 0xf5,
		0xe6, 0x3f, 0xbf, 0x76, 0xee, 0x9b, 0x77, 0x8d, 0xf6, 0x50, 0xd7, 0xda, 0x2b, 0xdd, 0x5e, 0x7b,
		0x7e, 0x91, 0x27, 0xb5, 0xf6, 0xc5, 0x10, 0x3d, 0xc3, 0x1f, 0xc3, 0x1f, 0xc3, 0x1f, 0xc3, 0x1f,
		0x43, 0x49, 0x0d, 0xbf, 0x0c, 0xbf, 0x5c, 0x43, 0xbf, 0x0c, 0x25, 0xb5, 0xe8, 0x83, 0x43, 0x49,
		0xbd, 0x39, 0xb4, 0x50, 0x52, 0x17, 0xe0, 0x10, 0xc4, 0x7b, 0xa1, 0x6c, 0x58, 0x52, 0x1e, 0xb9,
		0x5f, 0x5a, 0xd9, 0xb0, 0x3e, 0xca, 0x86, 0xc9, 0x84, 0x38, 0x48, 0x18, 0xa2, 0x6c, 0x18, 0xca,
		0x86, 0xa5, 0x0f, 0x12, 0xca, 0x86, 0xc1, 0x56, 0x73, 0xb3, 0x55, 0x24, 0xf7, 0xb1, 0xca, 0xc6,
		0x2a, 0xbb, 0xe8, 0xdd, 0x4f, 0x24, 0xf7, 0x91, 0xdc, 0xcf, 0x70, 0xaa, 0x48, 0xee, 0xc3, 0x9d,
		0xc2, 0x9d, 0xd2, 0xdc, 0x29, 0x92, 0x49, 0x48, 0x26, 0x21, 0xb9, 0x0f, 0x7f, 0x0c, 0x7f, 0x0c,
		0x7f, 0x0c, 0x7f, 0x8c, 0xe4, 0x3e, 0x05, 0xa8, 0x48, 0xee, 0xc3, 0x2f, 0x23, 0xb9, 0x4f, 0xc7,
		0x3a, 0x92, 0xfb, 0x82, 0x97, 0x41, 0x72, 0xbf, 0xf0, 0xa1, 0x45, 0x72, 0x7f, 0xbf, 0x94, 0x8c,
		0x32, 0x69, 0x20, 0x61, 0x90, 0x70, 0xf6, 0xec, 0xa3, 0x4c, 0x1a, 0xca, 0xa4, 0xc1, 0xea, 0x15,
		0x94, 0x49, 0x23, 0xc9, 0xd3, 0xf6, 0x57, 0x26, 0xad, 0x8f, 0x32, 0x69, 0x88, 0x32, 0xe0, 0x6f,
		0x6a, 0x1a, 0x65, 0xa0, 0x4c, 0x5a, 0x55, 0x05, 0xc7, 0x25, 0x95, 0x49, 0xeb, 0xa3, 0x4c, 0xda,
		0xce, 0xfd, 0x8b, 0x07, 0x51, 0x26, 0xad, 0x5f, 0x5c, 0x99, 0xb4, 0x7e, 0x11, 0x65, 0xd2, 0x68,
		0xe2, 0x57, 0x96, 0xe8, 0x95, 0x5d, 0x28, 0xad, 0x53, 0x68, 0xa1, 0xb4, 0x43, 0xae, 0x92, 0x56,
		0x99, 0x12, 0x69, 0x96, 0x3d, 0x31, 0x45, 0xde, 0x79, 0x58, 0x74, 0x3b, 0xa8, 0xf7, 0x1d, 0x1e,
		0xb2, 0x80, 0xba, 0x7e, 0x6f, 0x3a, 0xb0, 0xf3, 0x33, 0x02, 0x79, 0x19, 0xc1, 0x7c, 0x8c, 0x40,
		0x28, 0x2a, 0x93, 0x7f, 0x91, 0x4c, 0x0e, 0xc8, 0xe6, 0x5b, 0xf2, 0xc8, 0x01, 0x08, 0xe4, 0x57,
		0xa4, 0xf2, 0x2a, 0x79, 0x0d, 0xd9, 0x60, 0x30, 0x18, 0xec, 0x71, 0xd4, 0x0a, 0x5a, 0x35, 0x8c,
		0xca, 0x7c, 0xed, 0xce, 0xb6, 0x4d, 0x47, 0xbb, 0x9d, 0x1a, 0xb6, 0x66, 0x4d, 0x44, 0x68, 0x28,
		0xda, 0x1d, 0x74, 0x04, 0x3a, 0xda, 0x13, 0x1d, 0xf1, 0x20, 0x18, 0x85, 0x61, 0x1f, 0x7c, 0x94,
		0xec, 0x5c, 0xdb, 0xe0, 0x23, 0xee, 0x90, 0x75, 0xf5, 0x41, 0x17, 0x7c, 0x24, 0xc3, 0x47, 0x57,
		0xc1, 0x44, 0x30, 0x69, 0x68, 0xd1, 0x0b, 0xec, 0x03, 0xf6, 0xd9, 0x13, 0xfb, 0x44, 0xf7, 0xb2,
		0x34, 0x06, 0x18, 0x45, 0x37, 0xb0, 0x99, 0x1b, 0xd7, 0xf9, 0x98, 0xe6, 0xcc, 0xf7, 0x64, 0x42,
		0xc5, 0xcd, 0xee, 0x30, 0x56, 0x18, 0x2b, 0x42, 0x45, 0x84, 0x8a, 0x08, 0x15, 0x11, 0x2a, 0x0a,
		0xf2, 0x11, 0x53, 0xc4, 0x29, 0x26, 0xde, 0x04, 0x03, 0x81, 0x81, 0xf2, 0x0f, 0x17, 0xb9, 0xb2,
		0x4a, 0xa6, 0x9c, 0x32, 0xbf, 0xea, 0x3e, 0x4c, 0xd9, 0xa4, 0xb8, 0x5c, 0xb2, 0x26, 0x87, 0xf8,
		0xc0, 0xce, 0xca, 0xb7, 0xb3, 0x52, 0x65, 0x2f, 0x12, 0x1a, 0x46, 0x11, 0x71, 0x82, 0x98, 0x6c,
		0x31, 0x3f, 0xfb, 0xf6, 0x05, 0x6d, 0xdb, 0x77, 0xc1, 0x9f, 0xb0, 0xeb, 0x7d, 0xf1, 0xa7, 0x90,
		0x60, 0xb0, 0x1a, 0xfb, 0x2c, 0xd5, 0x97, 0x62, 0x51, 0xc7, 0x55, 0xd8, 0xdd, 0x09, 0x8b, 0xb1,
		0x8e, 0x18, 0x63, 0xb6, 0x92, 0xf1, 0xed, 0xd0, 0xc9, 0xd0, 0xa4, 0x7b, 0x74, 0xc9, 0xde, 0x96,
		0x54, 0xaf, 0xab, 0xef, 0x7a, 0xbd, 0x8f, 0x26, 0xd2, 0x4b, 0x7b, 0x3a, 0x22, 0x12, 0x84, 0x10,
		0xa0, 0xee, 0x14, 0xbd, 0x71, 0xe7, 0x3c, 0x79, 0xb6, 0xe3, 0x73, 0xb9, 0xf9, 0xc9, 0xd6, 0x73,
		0x2f, 0x67, 0x73, 0xf1, 0xc5, 0x5b, 0x7f, 0xda, 0x39, 0x89, 0xd9, 0x93, 0xb7, 0x35, 0x69, 0xed,
		0x27, 0xdd, 0x6e, 0xff, 0xa4, 0xdb, 0xd5, 0x4f, 0x1e, 0x9f, 0xe8, 0x83, 0x5e, 0xaf, 0xdd, 0x6f,
		0x27, 0x4c, 0xe2, 0xee, 0xc9, 0xdb, 0xbe, 0xf9, 0x8c, 0xc9, 0xa2, 0x4e, 0x52, 0xc2, 0xbc, 0xd0,
		0xe6, 0x63, 0x73, 0x0a, 0xd6, 0x03, 0x1d, 0xb9, 0x4f, 0xd5, 0x36, 0xbd, 0x8f, 0x33, 0xe7, 0x4a,
		0xb3, 0x6c, 0xd7, 0x33, 0xec, 0x04, 0x7a, 0x5b, 0x93, 0xe6, 0x76, 0xcb, 0xed, 0xa9, 0x4a, 0x0c,
		0xe4, 0x53, 0x89, 0x7d, 0x17, 0x81, 0x6f, 0x12, 0xb5, 0x9d, 0xc4, 0xd2, 0x59, 0x6c, 0x4c, 0x66,
		0x5d, 0x32, 0xbb, 0xc6, 0x59, 0xd4, 0x4e, 0xa0, 0xd0, 0xdd, 0x70, 0x4e, 0x53, 0x07, 0x66, 0x1d,
		0x98, 0x4a, 0x3b, 0x20, 0x35, 0x63, 0x2d, 0x95, 0x19, 0x63, 0x51, 0x62, 0x2a, 0xc2, 0xd4, 0x70,
		0x03, 0x26, 0x76, 0x80, 0xc4, 0x0e, 0x88, 0x68, 0x53, 0x27, 0xc6, 0x37, 0x59, 0x82, 0x4f, 0xa2,
		0xd0, 0x93, 0x25, 0xf0, 0x24, 0x06, 0xd7, 0x25, 0x1c, 0xac, 0x6c, 0x1f, 0xaa, 0x58, 0xd8, 0x2e,
		0x5c, 0x29, 0x4c, 0x0e, 0x83, 0xf9, 0xd2, 0x4b, 0x86, 0xe4, 0x92, 0x99, 0xaf, 0x60, 0x04, 0xed,
		0x22, 0xf9, 0x09, 0xd1, 0x97, 0xd8, 0x04, 0xa5, 0x94, 0x32, 0x3b, 0xea, 0x9c, 0x17, 0x02, 0x45,
		0xf2, 0x0e, 0xb2, 0x43, 0x21, 0x5a, 0x6a, 0x42, 0x6a, 0x4c, 0x72, 0x5a, 0x2d, 0x8d, 0x8a, 0x38,
		0xdd, 0x7e, 0x15, 0x15, 0x31, 0x5c, 0x71, 0x76, 0x64, 0xac, 0x54, 0xea, 0x9c, 0x7b, 0xb8, 0x63,
		0x61, 0x77, 0x4c, 0x7e, 0x71, 0x23, 0x0c, 0xba, 0x99, 0x9b, 0x67, 0x09, 0x2b, 0x98, 0xfa, 0x6e,
		0x9d, 0xd9, 0x0f, 0x75, 0xdf, 0xcc, 0x46, 0xd2, 0xa9, 0xf4, 0xcd, 0xaf, 0xf4, 0x2d, 0x00, 0xb1,
		0x7d, 0x1d, 0xfe, 0xfe, 0x8e, 0xd4, 0x96, 0x81, 0xd8, 0xfe, 0x4f, 0x99, 0x3b, 0x83, 0xdb, 0x0b,
		0xfb, 0x56, 0xec, 0x83, 0xe5, 0x59, 0x23, 0x44, 0x3e, 0x4c, 0xd9, 0xa1, 0x78, 0x1d, 0x5c, 0xf6,
		0x45, 0x78, 0xd5, 0xf7, 0xdb, 0xff, 0x0e, 0xfc, 0x58, 0xda, 0xf6, 0x45, 0x3e, 0x51, 0x00, 0x49,
		0x66, 0xca, 0x91, 0x97, 0x62, 0x29, 0xf6, 0x20, 0x97, 0x62, 0xb6, 0x45, 0x95, 0x7b, 0x72, 0xd2,
		0x0f, 0xc4, 0xb4, 0x83, 0x18, 0xf4, 0x49, 0x71, 0x0b, 0x27, 0x5e, 0x01, 0xf4, 0x1f, 0x26, 0xf4,
		0x69, 0x91, 0x2c, 0xa7, 0x24, 0xb2, 0xfa, 0x72, 0x59, 0x23, 0xf7, 0x20, 0x76, 0x21, 0xda, 0xd8,
		0x85, 0x58, 0x0e, 0x45, 0xa7, 0x57, 0xc7, 0xed, 0x07, 0x02, 0x62, 0xb9, 0x45, 0xbb, 0xd5, 0xe1,
		0x99, 0xf6, 0xa7, 0xa1, 0x7d, 0xd1, 0xb5, 0x81, 0xf2, 0xcd, 0xaf, 0xdf, 0x7e, 0xf7, 0xfd, 0x5f,
		0xef, 0x7c, 0x5d, 0xef, 0xf4, 0x1b, 0xcd, 0xbb, 0x9f, 0x7e, 0xf9, 0xfb, 0x9f, 0x47, 0xc7, 0x3f,
		0xb4, 0xde, 0x9f, 0xfe, 0xfc, 0x54, 0x1b, 0xfd, 0xa8, 0xee, 0x65, 0x7b, 0xc4, 0x09, 0x64, 0xfa,
		0x16, 0x23, 0x3a, 0x5a, 0x77, 0x01, 0x4f, 0x80, 0x27, 0xe2, 0xbb, 0x67, 0x9c, 0xb3, 0xd2, 0x56,
		0x6c, 0x41, 0x78, 0xad, 0x7b, 0x79, 0x2f, 0xb9, 0x73, 0x45, 0xe4, 0x68, 0x80, 0xae, 0xc0, 0xc9,
		0x57, 0x22, 0x87, 0x00, 0x08, 0x17, 0xff, 0x57, 0xc3, 0x02, 0xfa, 0x77, 0xc3, 0xb6, 0x36, 0x08,
		0x0b, 0xed, 0xb7, 0x17, 0x3f, 0x82, 0xdf, 0xa3, 0x05, 0xf8, 0xc3, 0xa2, 0xfc, 0xab, 0x22, 0xfd,
		0xec, 0x8e, 0x6a, 0xde, 0x3a, 0xf0, 0xe3, 0x02, 0xa7, 0xae, 0x5f, 0x83, 0xa9, 0x3b, 0xdc, 0xc3,
		0xc9, 0x46, 0xfb, 0x4e, 0x01, 0x94, 0x26, 0xa7, 0xa1, 0x6e, 0x9b, 0xf0, 0x64, 0x35, 0xb4, 0x4d,
		0x12, 0xb2, 0xb8, 0x26, 0x51, 0x3a, 0xb2, 0xab, 0x7e, 0x15, 0xa9, 0x6e, 0x15, 0x59, 0x68, 0xd0,
		0x81, 0xd0, 0x00, 0x42, 0x03, 0x84, 0x6e, 0x75, 0x0b, 0xdd, 0x20, 0x34, 0xc8, 0x5a, 0xd7, 0x42,
		0x68, 0x00, 0xa1, 0x41, 0xaa, 0x1b, 0x86, 0xd0, 0x00, 0xee, 0x38, 0xfd, 0x2b, 0x21, 0x34, 0xc8,
		0x19, 0x66, 0xa2, 0x70, 0x93, 0x86, 0x9d, 0x34, 0xfc, 0xe4, 0x60, 0xc8, 0x74, 0x86, 0x10, 0x1a,
		0x40, 0x68, 0x20, 0x3e, 0x38, 0xe5, 0x08, 0x0d, 0x82, 0xb7, 0x30, 0x0b, 0xd6, 0x19, 0x04, 0xef,
		0x5e, 0x42, 0x66, 0x00, 0xe6, 0x87, 0xcc, 0x20, 0x7f, 0xe8, 0x43, 0x66, 0x00, 0xe8, 0xe7, 0x02,
		0x7d, 0xc8, 0x0c, 0x32, 0x16, 0xde, 0x90, 0x19, 0x40, 0x66, 0x10, 0xeb, 0x50, 0x75, 0x99, 0x01,
		0xad, 0x76, 0x13, 0xaf, 0x66, 0x13, 0x18, 0xe2, 0x41, 0x32, 0x04, 0x79, 0xbd, 0x49, 0x5c, 0x67,
		0x42, 0x38, 0x03, 0x5c, 0x57, 0x01, 0xd7, 0x10, 0xce, 0x90, 0xf6, 0x16, 0x21, 0x9c, 0xc9, 0x79,
		0xea, 0x20, 0x9c, 0x79, 0xd0, 0xc2, 0x99, 0x8c, 0x23, 0xcf, 0x88, 0x15, 0x01, 0xf9, 0x95, 0x00,
		0x91, 0xd4, 0x3a, 0x00, 0x96, 0x2b, 0x73, 0x7b, 0x98, 0x55, 0xa4, 0x4f, 0x78, 0x7f, 0x98, 0x5a,
		0x9b, 0x4f, 0xdc, 0xa2, 0x7c, 0xa6, 0x35, 0xf9, 0x2e, 0xe2, 0x45, 0xc4, 0x8b, 0xf1, 0x11, 0x67,
		0x55, 0xc5, 0x2b, 0x77, 0x9f, 0xb8, 0x42, 0x62, 0xcc, 0xac, 0x01, 0x12, 0x75, 0x14, 0xf9, 0xd4,
		0x39, 0x13, 0x29, 0x15, 0x96, 0xf9, 0xcc, 0xb4, 0xc2, 0x61, 0x19, 0x4f, 0x49, 0x29, 0x22, 0xe6,
		0x7e, 0x76, 0x3d, 0xf3, 0x3a, 0xbd, 0x74, 0x58, 0xf8, 0xf7, 0xb2, 0x0a, 0x86, 0x25, 0x7e, 0x9d,
		0x52, 0x91, 0xa2, 0x61, 0xe1, 0xcd, 0xe5, 0x55, 0x38, 0xec, 0x66, 0x6a, 0x78, 0x17, 0x33, 0xe7,
		0x3a, 0x5b, 0xd0, 0xbb, 0x6a, 0x59, 0x95, 0xe2, 0x61, 0xee, 0x67, 0x57, 0x5b, 0xdc, 0x54, 0x4d,
		0xa5, 0xbd, 0xeb, 0xfb, 0x2f, 0x4b, 0xe1, 0x9b, 0x51, 0x25, 0x2e, 0x36, 0xcc, 0x99, 0x02, 0xf4,
		0x6a, 0xc5, 0xdf, 0x14, 0x40, 0xd4, 0x39, 0x78, 0x20, 0x00, 0x26, 0x9f, 0x18, 0x02, 0x87, 0x10,
		0x17, 0x05, 0x3b, 0x51, 0xf8, 0x49, 0xc3, 0x50, 0x1a, 0x8e, 0xb9, 0xc0, 0x92, 0x99, 0x02, 0x2b,
		0x5c, 0x72, 0xc6, 0x01, 0xa2, 0x82, 0xb3, 0x88, 0xd3, 0xbb, 0xe3, 0x40, 0x1f, 0xe1, 0x21, 0x13,
		0xd5, 0xbf, 0xe7, 0x3a, 0x76, 0x38, 0x01, 0x12, 0x4c, 0x04, 0x26, 0xda, 0x23, 0x13, 0x4d, 0xcc,
		0x5b, 0xeb, 0x80, 0xcf, 0x80, 0xc4, 0xbb, 0x08, 0x30, 0xce, 0xfa, 0x1a, 0x27, 0x03, 0x87, 0x8a,
		0x68, 0x52, 0x93, 0xa9, 0x2d, 0x44, 0x9c, 0xf8, 0xd0, 0xe2, 0x44, 0xb6, 0x46, 0xb1, 0x16, 0x01,
		0x62, 0x19, 0x69, 0xff, 0x1c, 0x35, 0x8d, 0xfb, 0x08, 0x6c, 0x6f, 0x4d, 0xc7, 0xb5, 0x44, 0x0e,
		0xac, 0x5c, 0x76, 0x04, 0x83, 0x82, 0x41, 0xf7, 0xcc, 0xa0, 0x75, 0x7f, 0xb7, 0x2f, 0x0f, 0x7d,
		0x42, 0x90, 0xb9, 0x69, 0x85, 0x3f, 0x96, 0xe9, 0x94, 0x16, 0x69, 0x93, 0x5d, 0x49, 0xce, 0xbd,
		0xbd, 0x5d, 0x5c, 0xeb, 0x7d, 0xf8, 0xe3, 0x4d, 0x78, 0xc9, 0x9d, 0x45, 0x5e, 0xb2, 0xc7, 0x23,
		0x4b, 0x77, 0x60, 0xf2, 0x64, 0x07, 0xb9, 0xbf, 0x94, 0xde, 0x41, 0xfe, 0xa0, 0x70, 0xff, 0x81,
		0xfc, 0x01, 0x68, 0x0d, 0xb4, 0x96, 0x2b, 0x10, 0x15, 0xe4, 0x0f, 0xb0, 0x2e, 0x2c, 0x60, 0xc8,
		0x90, 0x3f, 0x40, 0xfe, 0x00, 0x4c, 0x84, 0xfc, 0x01, 0xf2, 0x07, 0x32, 0xfb, 0xb6, 0x30, 0x4e,
		0x18, 0x67, 0x61, 0xc6, 0x89, 0xfc, 0x01, 0xe2, 0x44, 0xe4, 0x0f, 0x0a, 0x09, 0x10, 0x91, 0x3f,
		0xc8, 0xbc, 0x7d, 0x62, 0xcd, 0x84, 0x98, 0xd7, 0x22, 0xd5, 0x4e, 0x00, 0x7f, 0x82, 0x3f, 0x1f,
		0x42, 0xf6, 0x80, 0xb4, 0x3d, 0x4f, 0x7e, 0xcb, 0x35, 0xe1, 0x09, 0x19, 0xef, 0x24, 0x2a, 0xf4,
		0x5d, 0x73, 0xd8, 0xdb, 0xc3, 0xb5, 0x37, 0x66, 0xce, 0x6a, 0x8d, 0x63, 0x7a, 0xee, 0x4a, 0xe0,
		0x85, 0xda, 0x88, 0xb9, 0x10, 0xb3, 0x59, 0xbc, 0xf7, 0x69, 0xf3, 0xb7, 0x69, 0x5f, 0xd0, 0x9e,
		0x7d, 0x17, 0xdc, 0x09, 0x5b, 0xde, 0x37, 0x77, 0xb2, 0xde, 0xee, 0xad, 0xdd, 0xbe, 0x10, 0xb4,
		0x31, 0xb0, 0x50, 0x44, 0xb7, 0xd2, 0x96, 0x56, 0x55, 0x6d, 0x0c, 0xb9, 0x2a, 0x01, 0x2f, 0x98,
		0x50, 0x2b, 0x5f, 0x8f, 0x20, 0x79, 0x3c, 0x78, 0xe5, 0x07, 0x92, 0x47, 0x60, 0x7f, 0xf5, 0x06,
		0x36, 0x9e, 0x89, 0x56, 0x5b, 0x60, 0xe3, 0x11, 0x52, 0x2b, 0x09, 0x1c, 0x45, 0xee, 0x30, 0xed,
		0xce, 0x54, 0xcb, 0x7d, 0x6e, 0x5c, 0x99, 0x7f, 0xcc, 0x66, 0x71, 0x8f, 0xb3, 0x7d, 0xb7, 0x6a,
		0xf4, 0x4f, 0x1b, 0xf7, 0xf4, 0x6c, 0x91, 0x65, 0x09, 0x6e, 0xe4, 0xfe, 0xe8, 0xfe, 0x7f, 0x00,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x1c, 0xa0, 0xf1, 0xca, 0xd1, 0x01,
		0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interface/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_InterfaceKind)(0)),
	},
	"/interface/state/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_InterfaceKind)(0)),
	},
	"/interface/state/status": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_OperState)(0)),
	},
	"/interface/subinterface/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_SubinterfaceKind)(0)),
	},
	"/interface/subinterface/ipv4/state/status": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_OperState)(0)),
	},
	"/interface/subinterface/ipv6/state/status": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_OperState)(0)),
	},
	"/interface/subinterface/state/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_SubinterfaceKind)(0)),
	},
	"/interface/subinterface/state/status": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_OperState)(0)),
	},
	"/network-instance/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_NiKind)(0)),
	},
	"/network-instance/state/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_NiKind)(0)),
	},
	"/network-instance/state/status": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_OperState)(0)),
	},
	"/system/platform/config/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_DeviceKind)(0)),
	},
	"/system/platform/state/kind": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_DeviceKind)(0)),
	},
	"/system/platform/state/status": []reflect.Type{
		reflect.TypeOf((E_NddaCommon_OperState)(0)),
	},
}

